name: build

on:
  push:
    branches:
      - testing

jobs:
  prebuild:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 22
          cache: yarn

      - name: Get Electron version from package.json
        id: electron_version
        run: |
          echo "ELECTRON_VERSION=$(node -p "require('./package.json').devDependencies['electron'] || require('./package.json').dependencies['electron']")" >> $GITHUB_ENV

      - name: Cache node_modules and Electron native deps
        uses: actions/cache@v4
        with:
          path: |
            node_modules
            ~/.cache/electron
            ~/.cache/electron-builder
            .yarn/cache
            .yarn/unplugged
            .yarn/build-state.yml
            .yarn/install-state.gz
          key: ubuntu-latest-electron${{ env.ELECTRON_VERSION }}-${{ hashFiles('**/yarn.lock') }}
          restore-keys: |
            ubuntu-latest-electron${{ env.ELECTRON_VERSION }}-
            ubuntu-latest-

      - name: Install dependencies
        run: yarn install --frozen-lockfile

      - name: Prebuild (tsc & vite)
        run: yarn run prebuild

      - name: Upload prebuild artifacts
        uses: actions/upload-artifact@v4
        with:
          name: prebuild
          path: |
            dist
            dist-electron

  build:
    needs: prebuild
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest]
    runs-on: ${{ matrix.os }}

    env:
      VITE_TWITCH_CLIENT_ID: ${{ secrets.VITE_TWITCH_CLIENT_ID }}
      VITE_TWITCH_CLIENT_SECRET: ${{ secrets.VITE_TWITCH_CLIENT_SECRET }}
      VITE_ITAD_API_KEY: ${{ secrets.VITE_ITAD_API_KEY }}
      VITE_STEAMGRIDDB_API_KEY: ${{ secrets.VITE_STEAMGRIDDB_API_KEY }}
      VITE_RD_CLIENT_ID: ${{ secrets.VITE_RD_CLIENT_ID }}
      GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Get Electron version from package.json
        id: electron_version
        run: |
          echo "ELECTRON_VERSION=$(node -p "require('./package.json').devDependencies['electron'] || require('./package.json').dependencies['electron']")" >> $GITHUB_ENV

      - name: Cache node_modules and Electron native deps
        uses: actions/cache@v4
        with:
          path: |
            node_modules
            ~/.cache/electron
            ~/.cache/electron-builder
            .yarn/cache
            .yarn/unplugged
            .yarn/build-state.yml
            .yarn/install-state.gz
          key: ${{ runner.os }}-electron${{ env.ELECTRON_VERSION }}-${{ hashFiles('**/yarn.lock') }}
          restore-keys: |
            ${{ runner.os }}-electron${{ env.ELECTRON_VERSION }}-
            ${{ runner.os }}-

      - name: Install dependencies
        run: yarn install --frozen-lockfile

      - name: Download prebuild artifacts
        uses: actions/download-artifact@v4
        with:
          name: prebuild

      - name: Build on Linux
        if: matrix.os == 'ubuntu-latest'
        run: |
          sudo apt-get update
          sudo apt-get install -y libarchive-tools fakeroot dpkg snapd flatpak flatpak-builder rpm
          sudo ln -s /snap/bin/snapcraft /usr/local/bin/snapcraft
          sudo snap install snapcraft --classic
          yarn run build:linux

      - name: Build on Windows
        if: matrix.os == 'windows-latest'
        run: yarn run build:win

      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: build-${{ matrix.os }}
          path: |
            release/**
            dist/**
            dist-electron/**
