/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { createFileRoute } from '@tanstack/react-router'

// Import Routes

import { Route as rootRoute } from './routes/__root'
import { Route as SettingsImport } from './routes/settings'
import { Route as IndexImport } from './routes/index'
import { Route as FilterIndexImport } from './routes/filter/index'

// Create Virtual Routes

const ProfileLazyImport = createFileRoute('/profile')()
const LibraryLazyImport = createFileRoute('/library')()
const DownloadsLazyImport = createFileRoute('/downloads')()
const CalendarLazyImport = createFileRoute('/calendar')()
const InfoIdLazyImport = createFileRoute('/info/$id')()

// Create/Update Routes

const ProfileLazyRoute = ProfileLazyImport.update({
  id: '/profile',
  path: '/profile',
  getParentRoute: () => rootRoute,
} as any).lazy(() => import('./routes/profile.lazy').then((d) => d.Route))

const LibraryLazyRoute = LibraryLazyImport.update({
  id: '/library',
  path: '/library',
  getParentRoute: () => rootRoute,
} as any).lazy(() => import('./routes/library.lazy').then((d) => d.Route))

const DownloadsLazyRoute = DownloadsLazyImport.update({
  id: '/downloads',
  path: '/downloads',
  getParentRoute: () => rootRoute,
} as any).lazy(() => import('./routes/downloads.lazy').then((d) => d.Route))

const CalendarLazyRoute = CalendarLazyImport.update({
  id: '/calendar',
  path: '/calendar',
  getParentRoute: () => rootRoute,
} as any).lazy(() => import('./routes/calendar.lazy').then((d) => d.Route))

const SettingsRoute = SettingsImport.update({
  id: '/settings',
  path: '/settings',
  getParentRoute: () => rootRoute,
} as any)

const IndexRoute = IndexImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRoute,
} as any)

const FilterIndexRoute = FilterIndexImport.update({
  id: '/filter/',
  path: '/filter/',
  getParentRoute: () => rootRoute,
} as any)

const InfoIdLazyRoute = InfoIdLazyImport.update({
  id: '/info/$id',
  path: '/info/$id',
  getParentRoute: () => rootRoute,
} as any).lazy(() => import('./routes/info/$id.lazy').then((d) => d.Route))

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexImport
      parentRoute: typeof rootRoute
    }
    '/settings': {
      id: '/settings'
      path: '/settings'
      fullPath: '/settings'
      preLoaderRoute: typeof SettingsImport
      parentRoute: typeof rootRoute
    }
    '/calendar': {
      id: '/calendar'
      path: '/calendar'
      fullPath: '/calendar'
      preLoaderRoute: typeof CalendarLazyImport
      parentRoute: typeof rootRoute
    }
    '/downloads': {
      id: '/downloads'
      path: '/downloads'
      fullPath: '/downloads'
      preLoaderRoute: typeof DownloadsLazyImport
      parentRoute: typeof rootRoute
    }
    '/library': {
      id: '/library'
      path: '/library'
      fullPath: '/library'
      preLoaderRoute: typeof LibraryLazyImport
      parentRoute: typeof rootRoute
    }
    '/profile': {
      id: '/profile'
      path: '/profile'
      fullPath: '/profile'
      preLoaderRoute: typeof ProfileLazyImport
      parentRoute: typeof rootRoute
    }
    '/info/$id': {
      id: '/info/$id'
      path: '/info/$id'
      fullPath: '/info/$id'
      preLoaderRoute: typeof InfoIdLazyImport
      parentRoute: typeof rootRoute
    }
    '/filter/': {
      id: '/filter/'
      path: '/filter'
      fullPath: '/filter'
      preLoaderRoute: typeof FilterIndexImport
      parentRoute: typeof rootRoute
    }
  }
}

// Create and export the route tree

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/settings': typeof SettingsRoute
  '/calendar': typeof CalendarLazyRoute
  '/downloads': typeof DownloadsLazyRoute
  '/library': typeof LibraryLazyRoute
  '/profile': typeof ProfileLazyRoute
  '/info/$id': typeof InfoIdLazyRoute
  '/filter': typeof FilterIndexRoute
}

export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/settings': typeof SettingsRoute
  '/calendar': typeof CalendarLazyRoute
  '/downloads': typeof DownloadsLazyRoute
  '/library': typeof LibraryLazyRoute
  '/profile': typeof ProfileLazyRoute
  '/info/$id': typeof InfoIdLazyRoute
  '/filter': typeof FilterIndexRoute
}

export interface FileRoutesById {
  __root__: typeof rootRoute
  '/': typeof IndexRoute
  '/settings': typeof SettingsRoute
  '/calendar': typeof CalendarLazyRoute
  '/downloads': typeof DownloadsLazyRoute
  '/library': typeof LibraryLazyRoute
  '/profile': typeof ProfileLazyRoute
  '/info/$id': typeof InfoIdLazyRoute
  '/filter/': typeof FilterIndexRoute
}

export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | '/settings'
    | '/calendar'
    | '/downloads'
    | '/library'
    | '/profile'
    | '/info/$id'
    | '/filter'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/'
    | '/settings'
    | '/calendar'
    | '/downloads'
    | '/library'
    | '/profile'
    | '/info/$id'
    | '/filter'
  id:
    | '__root__'
    | '/'
    | '/settings'
    | '/calendar'
    | '/downloads'
    | '/library'
    | '/profile'
    | '/info/$id'
    | '/filter/'
  fileRoutesById: FileRoutesById
}

export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  SettingsRoute: typeof SettingsRoute
  CalendarLazyRoute: typeof CalendarLazyRoute
  DownloadsLazyRoute: typeof DownloadsLazyRoute
  LibraryLazyRoute: typeof LibraryLazyRoute
  ProfileLazyRoute: typeof ProfileLazyRoute
  InfoIdLazyRoute: typeof InfoIdLazyRoute
  FilterIndexRoute: typeof FilterIndexRoute
}

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  SettingsRoute: SettingsRoute,
  CalendarLazyRoute: CalendarLazyRoute,
  DownloadsLazyRoute: DownloadsLazyRoute,
  LibraryLazyRoute: LibraryLazyRoute,
  ProfileLazyRoute: ProfileLazyRoute,
  InfoIdLazyRoute: InfoIdLazyRoute,
  FilterIndexRoute: FilterIndexRoute,
}

export const routeTree = rootRoute
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/",
        "/settings",
        "/calendar",
        "/downloads",
        "/library",
        "/profile",
        "/info/$id",
        "/filter/"
      ]
    },
    "/": {
      "filePath": "index.tsx"
    },
    "/settings": {
      "filePath": "settings.tsx"
    },
    "/calendar": {
      "filePath": "calendar.lazy.tsx"
    },
    "/downloads": {
      "filePath": "downloads.lazy.tsx"
    },
    "/library": {
      "filePath": "library.lazy.tsx"
    },
    "/profile": {
      "filePath": "profile.lazy.tsx"
    },
    "/info/$id": {
      "filePath": "info/$id.lazy.tsx"
    },
    "/filter/": {
      "filePath": "filter/index.tsx"
    }
  }
}
ROUTE_MANIFEST_END */
